use ECOMM_STORE;

DROP TABLE IF EXISTS PRODUCTS_1;

CREATE TABLE `PRODUCTS_1` (
    `PRODUCT_ID` INT NOT NULL AUTO_INCREMENT,
    `PRODUCT_NAME` VARCHAR(200) NOT NULL,
    `PRODUCT_TYPE` VARCHAR(45) NOT NULL,
    `PRICE` decimal(10,2) not null,
    `QUANTITY` INT NOT NULL DEFAULT 0,
    PRIMARY KEY (`PRODUCT_ID`),
    UNIQUE KEY `PRODUCT_NAME_UNIQUE` (`PRODUCT_NAME`)
) ENGINE = InnoDB;



SELECT * FROM PRODUCTS_1;

desc ECOMM_STORE.PRODUCTS_1;

insert into `ECOMM_STORE`.`PRODUCTS_1` (`PRODUCT_NAME`, `PRODUCT_TYPE`, `PRICE`, `QUANTITY`)
VALUES ('Deep Work', 'Book', 14.99, 100);

commit;

# 2ND VARIATION INSERT STATEMENT:
INSERT INTO `ECOMM_STORE`.`PRODUCTS_1`(`PRODUCT_ID`, `PRODUCT_NAME`, `PRODUCT_TYPE`, `PRICE`, `QUANTITY`)
VALUES (2, 'Digital Minimalism', 'Book', 18.99, 150);

COMMIT ;
SELECT * FROM PRODUCTS_1;

# 3RD VARIATION: JUMP VALUES ALL THE WAY TO 10
INSERT INTO `ECOMM_STORE`.`PRODUCTS_1`(`PRODUCT_ID`, `PRODUCT_NAME`, `PRODUCT_TYPE`, `PRICE`, `QUANTITY`)
VALUES (10, 'Art of possibilities', 'Book', 18.99, 50);
COMMIT;

# ANOTHER VAR: NO ID SPECIFIED, AUTOINCREMENT STILL WORKING
INSERT INTO `ECOMM_STORE`.`PRODUCTS_1`(`PRODUCT_NAME`, `PRODUCT_TYPE`, `PRICE`, `QUANTITY`)
VALUES ('Mind at its Home', 'Book', 12.99, 100);

# ANOTHER INSERT VAR:   *BOTH tables COLUMNS have to be the same*
# INSERT INTO `ECOMM_STORE`.`PRODUCTS_1`
# SELECT `PRODUCTS_3`.`PRODUCT_ID`, `PRODUCTS_3`.`PRODUCT_NAME`, `PRODUCTS_3`.`PRODUCT_TYPE`,
#        `PRODUCTS_3`.`PRICE`, `PRODUCTS_3`.`QUANTITY`
# FROM `ECOMM_STORE`.`PRODUCTS_3`;

# another: multi-insert
# INSERT INTO `ECOMM_STORE`.`PRODUCTS_1`(`PRODUCT_NAME`, `PRODUCT_TYPE`, `PRICE`, `QUANTITY`)
# VALUES ('Deep Work', 'Book', 14.99, 100),
#        ('Mind at its Home', 'Book', 12.99, 100);



#             UPDATE STATEMENTS
SELECT * FROM PRODUCTS_1;

UPDATE PRODUCTS_1
SET QUANTITY= 100;

UPDATE PRODUCTS_1
SET QUANTITY = QUANTITY + 50
WHERE PRODUCT_ID IN (1, 2, 3);

# CASE WHEN THEN ELSE style:  note item 10 + 11 never go past 100
UPDATE PRODUCTS_1
SET QUANTITY = CASE
when PRODUCT_ID = 1 THEN quantity +50
WHEN PRODUCT_ID = 2 THEN QUANTITY + 100
ELSE 100
END
WHERE PRODUCT_ID in (1, 2, 3)


# DELETES
DELETE from PRODUCTS_1
WHERE PRODUCT_ID = 3;

SELECT * FROM PRODUCTS_1;

# SAFE UPDATES: if try delete or update statement not using primary key column in WHERE clause, and enabled (set = 1), get error 1175
SET SQL_SAFE_UPDATES = 0;

DELETE FROM PRODUCTS_1
WHERE QUANTITY < 10;


DELETE FROM PRODUCTS_1
WHERE QUANTITY < 100
LIMIT 1;

# can delete rows based on criteria and/or position of a column: #10 gets delete before # 11
DELETE FROM PRODUCTS_1
ORDER BY QUANTITY, PRODUCT_ID
LIMIT 1;


# SELECTS
# Select only columns needed, not *     order by can be expensive - sort buffer size
SELECT PRODUCT_ID, PRODUCT_NAME, QUANTITY
FROM PRODUCTS_1
WHERE QUANTITY < 500
ORDER BY PRODUCT_NAME;

# selecting multiple functions in the same query
SELECT now(), database();